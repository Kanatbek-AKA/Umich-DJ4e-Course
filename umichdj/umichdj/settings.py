# https://www.dj4e.com/assn/dj4e_ads2.md?PHPSESSID=cfcf922ee6aa9083de6aa0c449bd1b34
"""
Django settings for umich_dj project.

Generated by 'django-admin startproject' using Django 4.1.9.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path
from django.core.management.utils import get_random_secret_key
import sys
import dj_database_url

# Used django-environ- for some reason social apps does not accept it, while keys are rendered
import environ
env = environ.Env()
environ.Env.read_env()

# Checking with python-dotenv
# from dotenv import load_env, find_env
# load_env(find_env(".env"))


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# NOTE: you can create token using import secrets, md5, base64, etc

SECRET_KEY =  os.getenv("DJANGO_SECRET_KEY", get_random_secret_key())

# APP_NAME = 'Social Authentication'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True # os.getenv("DEBUG", "False") == "True"   # os.environ["DEBUG"]  

# DEVELOPMENT_MODE = os.getenv("DEVELOPMENT_MODE", "False") == "True"   # used for setting up db connection

ALLOWED_HOSTS = [os.getenv("DJANGO_HOST"), 'localhost', "127.0.0.1"] 

CORS_ALLOWED_ORIGINS = [
            "https://akada.pythonanaywhere.com",
            "http://localhost:8000",
            "http://127.0.0.1:8000",
            ]


# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # your apps 
    "imgapp",
    "django.contrib.humanize",
    'clearcache',
    'corsheaders',
    'django_extensions', 
    'crispy_forms',  
    'crispy_bootstrap5',
    'rest_framework', 
    'social_django',  # social_django_mongoengine   
    'taggit',
    "favicon",
    'fontawesomefree',
    #  
    # 'allauth',
    # 'allauth.account',
    # 'allauth.socialaccount',
    # 'allauth.socialaccount.providers.google',
    # 'allauth.socialaccount.providers.facebook',
    # 
    # 'drf_social_oauth2',
]

# Use cripsy if you're not care of front-end UI delivery OR use your CSS|bootstrap models/forms 
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"  # Added
CRISPY_TEMPLATE_PACK = 'bootstrap5'  

# When we get to tagging
TAGGIT_CASE_INSENSITIVE = True    # to learn


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",                 # added
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'social_django.middleware.SocialAuthExceptionMiddleware',   # Add
]


# Want to test if the Michigan brakes this basic protection while the views and html not secured
# REFERRER_POLICY = "no-referrer"   # added

# CSRF_COOKIE_MASKED = True
# CSRF_COOKIE_SECURE = True
# CSRF_COOKIE_HTTPONLY = True
# CSRF_TRUSTED_ORIGINS = ['https://akada.pythonanywhere.com']
# CSRF_COOKIE_SAMESITE= "Strict"

# SECURE_HSTS_SECONDS = 15768000   # around 6 months
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_SSL_REDIRECT = True
# SECURE_BROWSER_XSS_FILTER = True
# SECURE_CONTENT_TYPE_NOSNIFF = True

# SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")    # 
# SECURE__HSTS_PRELOAD = True

# SESSION_COOKIE_SECURE = True

# X_FRAME_OPTIONS = "DENY"

# CONN_HEALTH_CHECK = True     # 

# TO add 
# INTERNAL_IPS = []
# CONN_MAX_AGE = 0

# Need to figure out how to correctly to add 
# USE_X_FORWARDED_HOST=False
# USE_X_FORWARDED_PORT=False

# CSP_DEFAULT_SRC = ("'self'",)
# CSP_STYLE_SRC = ("'self'",)
# CSP_SCRIPT_SRC = ("'self'",)
# CSP_FRON_SRC = ("'self'",)
# CSP_IMG_SRC = ("'self'",)

# CORS_ALLOWED_ORIGINS = ['https://domain.com', 'https://subdomain.com']
# CORS_ALLOWED_ORIGIN_REGEXES = [r'^https://\w\.domain\.com$', etc...]
# CORS_ALLOW_ALL_ORIGINS = [False]     # True is not allowed
# CORS_ALLOW_METHODS = ['GET', 'DELETE', 'POST', 'PUT', 'PATCH', 'OPTIONS']
# from corsheaders.defaults import default_methods
# CORS_ALLOW_METHODS = list(default_methods) + ['POKE', 'GET', 'DELETE', 'POST', 'PUT', 'PATCH', 'OPTIONS']
# CORS_ALLOW_HEADERS = ['accept', 'accept-enconding', 'authorization', 'content-type', 'dnt', 'origin', 'user-agent', 'x-csrftoken', 'x-requested-with']
# CSRF_TRUSTED_ORIGINS = ['https://get.allowed.dom']
#  more information on the website


ROOT_URLCONF = "umichdj.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # 
                'social_django.context_processors.backends',  # Add
                'social_django.context_processors.login_redirect', # Add
                ],
            },
        },
    ]

WSGI_APPLICATION = "umichdj.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/
LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True



# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATIC_URL = "static/"
# STATIC_ROOT = os.path.join(BASE_DIR, "static")

# STATICFILES_DIRS tuple tells Django where to look for static files that are not tied to a particular app.
STATICFILES_DIRS = (
   os.path.join(BASE_DIR, "static"),
   # os.path.join(BASE_DIR, "static/other_css/"),
   # os.path.join(BASE_DIR, "static/labs_css/"),
)

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

MEDIA_URL= "media/"
MEDIA_ROOT = os.path.join(STATIC_ROOT, 'media')


# FAVICON_PATH = STATIC_URL + "images/favicon.ico"   # by login started working



# For images alternative
# MEDIA_ROOT = os.path.abspath(os.path.join(BASE_DIR, 'api', 'uploads'))
# MEDIA_URL = 'uploads'
# FRONTEND_ROOT = os.path.abspath(os.path.join(BASE_DIR, '..', 'imgapp', 'templates', 'static'))

# django_allauth
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Add the settings below  --> drf_social_oauth2
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework.authentication.BasicAuthentication',
#         'rest_framework.authentication.SessionAuthentication',
          # 
          # 'oauth2_provider.ext.rest_framework.OAuth2Authentication',  # django-oauth-toolkit < 1.0.0
          # 'oauth2_provider.contrib.rest_framework.OAuth2Authentication',  # django-oauth-toolkit >= 1.0.0
          # 'drf_social_oauth2.authentication.SocialAuthentication',

#     )
# }


# Configure the social login OR use dotenv to provide key and secret
try:
    from . import social_settings  # github_settings 
    SOCIAL_AUTH_GITHUB_KEY = social_settings.SOCIAL_AUTH_GITHUB_KEY #os.environ['AUTH_GITHUB_KEY']
    SOCIAL_AUTH_GITHUB_SECRET = social_settings.SOCIAL_AUTH_GITHUB_SECRET #os.environ['AUTH_GITHUB_SECRET']
   
    # SOCIAL_AUTH_GITLAB_SECRET = ""
    # SOCIAL_AUTH_GITLAB_API_URL = ""
   
    SOCIAL_AUTH_TWITTER_KEY = social_settings.SOCIAL_AUTH_TWITTER_KEY    # os.environ['AUTH_TWITTER_KEY']
    SOCIAL_AUTH_TWITTER_SECRET = social_settings.SOCIAL_AUTH_TWITTER_SECRET # os.environ['AUTH_TWITTER_SECRET']

    SOCIAL_AUTH_FACEBOOK_KEY = social_settings.SOCIAL_AUTH_FACEBOOK_KEY #os.environ['AUTH_FACEBOOK_KEY']
    SOCIAL_AUTH_FACEBOOK_SECRET = social_settings.SOCIAL_AUTH_FACEBOOK_SECRET  #os.environ['AUTH_FACEBOOK_SECRET']
    # SOCIAL_AUTH_FACEBOOK_APP_NAMESPACE = ''
    
    SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = social_settings.SOCIAL_AUTH_GOOGLE_OAUTH2_KEY #os.environ['AUTH_GOOGLE_OAUTH2_KEY']
    SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = social_settings.SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET #os.environ['AUTH_GOOGLE_OAUTH2_SECRET']

    # SOCIAL_AUTH_GOOGLE_PLUS_KEY = '...'
    # SOCIAL_AUTH_GOOGLE_PLUS_SECRET = '...'

    # SOCIAL_AUTH_INSTAGRAM_KEY = ""
    # SOCIAL_AUTH_INSTAGRAM_SECRET = ""

    SOCIAL_AUTH_LINKEDIN_OAUTH2_KEY = social_settings.SOCIAL_AUTH_LINKEDIN_OAUTH2_KEY #os.environ['AUTH_LINKEDIN_OAUTH2_KEY']
    SOCIAL_AUTH_LINKEDIN_OAUTH2_SECRET = social_settings.SOCIAL_AUTH_LINKEDIN_OAUTH2_SECRET #os.environ['AUTH_LINKEDIN_OAUTH2_SECRET']

    SOCIAL_AUTH_STACKOVERFLOW_KEY = social_settings.SOCIAL_AUTH_STACKOVERFLOW_KEY #os.environ['AUTH_STACKOVERFLOW_KEY']
    SOCIAL_AUTH_STACKOVERFLOW_SECRET = social_settings.SOCIAL_AUTH_STACKOVERFLOW_SECRET  #os.environ['AUTH_STACKOVERFLOW_SECRET']
    #gq5kGDnZ5ZfJGsPACkXOjg(( Desktop OAuth Redirect Uri Is Enabled
    # Applications that have the client side flow enabled can use https://stackexchange.com/oauth/login_success as their redirect_uri by default.

    # SOCIAL_AUTH_DOCKER_KEY = ''
    # SOCIAL_AUTH_DOCKER_SECRET = ''

    SOCIAL_AUTH_DROPBOX_OAUTH2_KEY = social_settings.SOCIAL_AUTH_DROPBOX_OAUTH2_KEY # os.environ['AUTH_DROPBOX_OAUTH2_KEY']
    SOCIAL_AUTH_DROPBOX_OAUTH2_SECRET = social_settings.SOCIAL_AUTH_DROPBOX_OAUTH2_SECRET # os.environ['AUTH_DROPBOX_OAUTH2_SECRET']

    # SOCIAL_AUTH_TWILIO_KEY = ''
    # SOCIAL_AUTH_TWILIO_SECRET = ''

    # SOCIAL_AUTH_COURSERA_KEY = ""
    # SOCIAL_AUTH_COURSERA_SECRET = ""

    SOCIAL_AUTH_MAILRU_OAUTH2_KEY = social_settings.SOCIAL_AUTH_MAILRU_OAUTH2_KEY # os.environ['AUTH_MAILRU_OAUTH2_KEY']
    SOCIAL_AUTH_MAILRU_OAUTH2_SECRET = social_settings.SOCIAL_AUTH_MAILRU_OAUTH2_SECRET # os.environ['AUTH_MAILRU_OAUTH2_SECRET']

    SOCIAL_AUTH_DEEZER_KEY = social_settings.SOCIAL_AUTH_DEEZER_KEY #os.environ['AUTH_DEEZER_KEY'] 
    SOCIAL_AUTH_DEEZER_SECRET = social_settings.SOCIAL_AUTH_DEEZER_SECRET #os.environ['AUTH_DEEZER_SECRET']
    
    # SOCIAL_AUTH_SPOTIFY_KEY = ''
    # SOCIAL_AUTH_SPOTIFY_SECRET = ''

except:
    print('When you want to use social login, please see dj4e-samples/github_settings-dist.py')


# Scope of Auth App
SOCIAL_AUTH_GITHUB_SCOPE = ['user:email']

SOCIAL_AUTH_TWITTER_SCOPE = ['email']

SOCIAL_AUTH_FACEBOOK_SCOPE = ['email', 'user_link']
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {'fields': 'id, name, email, picture.type(large), link'}
# Stores in DB
SOCIAL_AUTH_FACEBOOK_EXTRA_DATA = [
    ('name', 'name'),
    ('email', 'email'),
    ('picture', 'picture'),
    ('link', 'profile_url'),
]

# SOCIAL_AUTH_INSTAGRAM_AUTH_EXTRA_ARGUMENTS = {'scope': 'likes comments relationships'}
# SOCIAL_AUTH_INSTAGRAM_EXTRA_DATA = [ {
# “id”:
# “username”: …,
# “profile_picture”: …,
# “full_name”: …,
# “bio”: …,
# “website”: …,
# “is_business”: …,
# }]


# Define SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE to get extra permissions from Google.
# SOCIAL_AUTH_GOOGLE_OAUTH2_IGNORE_DEFAULT_SCOPE = True
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'https://www.googleapis.com/auth/calendar',
    "https://www.googleapis.com/auth/drive",
    'https://www.googleapis.com/auth/userinfo.email',
    "https://www.googleapis.com/auth/userinfo.profile",
]
# Refresh Tokens 
SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS = {'access_type': 'offline'}   # ,'approval_prompt':'force'
# SOCIAL_AUTH_GOOGLE_PLUS_AUTH_EXTRA_ARGUMENTS = {
#       'access_type': 'offline'
# }

SOCIAL_AUTH_LINKEDIN_OAUTH2_SCOPE = ['r_liteprofile', 'r_emailaddress'] # r_basicprofile
SOCIAL_AUTH_LINKEDIN_OAUTH2_FIELD_SELECTORS = ['email-address', 'formatted-name', 'public-profile-url', 'picture-url']
SOCIAL_AUTH_LINKEDIN_OAUTH2_EXTRA_DATA = [
    ('id', 'id'),
    ('formattedName', 'name'),
    ('emailAddress', 'email_address'),
    ('pictureUrl', 'picture_url'),
    ('publicProfileUrl', 'profile_url'),
]

# SOCIAL_AUTH_STACKOVERFLOW_SCOPE = ['user', 'email']
# SOCIAL_AUTH_DROPBOX_OAUTH2_SCOPE = ['username', 'email', 'country']   # no scope granted can be requested for this app 
SOCIAL_AUTH_DEEZER_SCOPE = ['basic_access', 'email']
# SOCIAL_AUTH_SPOTIFY_SCOPE = ['user-read-email', 'user-library-read']

# Emails pipeline
SOCIAL_AUTH_PIPELINE = (
    "social_core.pipeline.social_auth.social_details",
    "social_core.pipeline.social_auth.social_uid",
    "social_core.pipeline.social_auth.auth_allowed",
    "social_core.pipeline.social_auth.social_user",
    # "common.pipeline.require_email",
    # "common.pipeline.require_country",
    # "common.pipeline.require_city",
    "social_core.pipeline.user.get_username",
    "social_core.pipeline.mail.mail_validation",
    "social_core.pipeline.user.create_user",
    "social_core.pipeline.social_auth.associate_user",
    "social_core.pipeline.debug.debug",
    "social_core.pipeline.social_auth.load_extra_data",
    "social_core.pipeline.user.user_details",
    "social_core.pipeline.debug.debug",
)

# social_django
SOCIAL_AUTH_STRATEGY = 'social_django.strategy.DjangoStrategy'
SOCIAL_AUTH_STORAGE = 'social_django.models.DjangoStorage'
# DEFAULT_FILE_STORAGE = 'storages.backends.dropbox.DropBoxStorage'


# https://python-social-auth.readthedocs.io/en/latest/configuration/django.html#authentication-backends
# https://simpleisbetterthancomplex.com/tutorial/2016/10/24/how-to-add-social-login-to-django.html
AUTHENTICATION_BACKENDS = (
    'social_core.backends.github.GithubOAuth2',
    'social_core.backends.twitter.TwitterOAuth', 
    "social_core.backends.facebook.FacebookAppOAuth2",      # Facebook
    'social_core.backends.facebook.FacebookOAuth2',
    # "social_core.backends.google.GoogleOAuth",              # Google 
    # "social_core.backends.google.GooglePlusAuth",           # Google + 
    # "social_core.backends.google_openidconnect.GoogleOpenIdConnect",   # GoogleOpenID
    "social_core.backends.google.GoogleOAuth2",             # Google 
    "social_core.backends.linkedin.LinkedinOAuth2",
    # # "social_core.backends.linkedin.LinkedinOAuth",
    "social_core.backends.stackoverflow.StackoverflowOAuth2",
    "social_core.backends.slack.SlackOAuth2",
    'social_core.backends.docker.DockerOAuth2',
    "social_core.backends.dropbox.DropboxOAuth2V2",
    'social_core.backends.deezer.DeezerOAuth2',
    "social_core.backends.spotify.SpotifyOAuth2",
    "social_core.backends.mailru.MailruOAuth2",

    'django.contrib.auth.backends.ModelBackend',
)


LOGOUT_REDIRECT_URL = '/'
LOGIN_REDIRECT_URL = '/'
# Don't set default LOGIN_URL - let django.contrib.auth set it when it is loaded
# LOGIN_URL = '/accounts/login'

# SOCIAL_AUTH_LOGIN_ERROR_URL = '/'
# SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/'
# SOCIAL_AUTH_RAISE_EXCEPTIONS = False



# Needed for 3.2 and later
# https://stackoverflow.com/questions/67783120/warning-auto-created-primary-key-used-when-not-defining-a-primary-key-type-by
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# https://coderwall.com/p/uzhyca/quickly-setup-sql-query-logging-django
# https://stackoverflow.com/questions/12027545/determine-if-django-is-running-under-the-development-server

'''  # Leave off for now
import sys
if (len(sys.argv) >= 2 and sys.argv[1] == 'runserver'):
    print('Running locally')
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
            }
        },
        'loggers': {
            'django.db.backends': {
                'handlers': ['console'],
                'level': 'DEBUG',
            },
        }
    }
'''
